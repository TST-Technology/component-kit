{"version":3,"sources":["views/user/login.js","helpers/IntlMessages.js","components/common/CustomBootstrap.js"],"names":["validatePassword","value","error","length","validateEmail","test","Login","useState","email","password","loading","setLoading","history","useHistory","initialValues","className","xxs","md","id","onSubmit","payload","AdminLogin","res","NotificationManager","success","authStorage","setAuthDetails","data","token","push","window","location","reload","errors","touched","name","validate","type","color","size","injectIntl","props","withRef","Colxx","widths","Separator"],"mappings":"gRAYMA,EAAmB,SAACC,GACxB,IAAIC,EAMJ,OALKD,EAEMA,EAAME,OAAS,IACxBD,EAAQ,0CAFRA,EAAQ,6BAIHA,CACR,EAEKE,EAAgB,SAACH,GACrB,IAAIC,EAMJ,OALKD,EAEO,4CAA4CI,KAAKJ,KAC3DC,EAAQ,yBAFRA,EAAQ,kCAIHA,CACR,EA2GcI,UAzGD,WACZ,MAAgBC,mBAAS,IAAlBC,EAAP,oBACA,EAAmBD,mBAAS,IAArBE,EAAP,oBACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAUC,cA2BVC,EAAgB,CAAEN,QAAOC,YAE/B,OACE,cAAC,IAAD,CAAKM,UAAU,QAAf,SACE,cAAC,IAAD,CAAOC,IAAI,KAAKC,GAAG,KAAKF,UAAU,kBAAlC,SACE,eAAC,IAAD,CAAMA,UAAU,YAAhB,UACE,qBAAKA,UAAU,gCAAf,SACE,qBAAKA,UAAU,uBAEjB,sBAAKA,UAAU,YAAf,UACE,cAAC,IAAD,CAAWA,UAAU,OAArB,SACE,cAAC,IAAD,CAAcG,GAAG,uBAGnB,cAAC,IAAD,CAAQJ,cAAeA,EAAeK,SAvC5B,SAAClB,GACnB,gCAAC,yGACOmB,EAAU,CACdZ,MAAOP,EAAMO,MACbC,SAAUR,EAAMQ,UAElBE,GAAW,GALZ,SAMmBU,YAAWD,GAN9B,QAOc,KADPE,EANP,UAQGC,IAAoBC,QAClB,uBACA,gBACA,IACA,KACA,KACA,IAEFC,IAAYC,eAAZ,OAA2BJ,QAA3B,IAA2BA,GAA3B,UAA2BA,EAAKK,YAAhC,aAA2B,EAAWC,OACtChB,EAAQiB,KAAK,2BACbC,OAAOC,SAASC,UAElBrB,GAAW,GApBZ,0CAAD,EAsBD,EAgBS,SACG,gBAAGsB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,CAAMnB,UAAU,kCAAhB,UACE,eAAC,IAAD,CAAWA,UAAU,6BAArB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcG,GAAG,iBAEnB,cAAC,IAAD,CACEH,UAAU,eACVoB,KAAK,QACLC,SAAUhC,IAEX6B,EAAOzB,OAAS0B,EAAQ1B,OACvB,qBAAKO,UAAU,uBAAf,SAAuCkB,EAAOzB,WAGlD,eAAC,IAAD,CAAWO,UAAU,6BAArB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAcG,GAAG,oBAEnB,cAAC,IAAD,CACEH,UAAU,eACVsB,KAAK,WACLF,KAAK,WACLC,SAAUpC,IAEXiC,EAAOxB,UAAYyB,EAAQzB,UAC1B,qBAAKM,UAAU,uBAAf,SACGkB,EAAOxB,cAId,qBAAKM,UAAU,oDAAf,SACE,eAAC,IAAD,CACEuB,MAAM,UACNvB,UAAS,wCACPL,EAAU,eAAiB,IAE7B6B,KAAK,KALP,UAOE,uBAAMxB,UAAU,yBAAhB,UACE,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,YAChB,sBAAMA,UAAU,eAElB,sBAAMA,UAAU,QAAhB,SACE,cAAC,IAAD,CAAcG,GAAG,+BA7C1B,aAyDd,C,8EClIcsB,iBAFO,SAACC,GAAD,OAAW,cAAC,IAAD,eAAsBA,GAAjC,GAEmB,CACvCC,SAAS,G,yICHLC,EAAQ,SAACF,GAAD,OACZ,cAAC,IAAD,2BAASA,GAAT,IAAgBG,OAAQ,CAAC,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,SADlD,EAGRC,EAAY,SAAC,GAAD,IAAG9B,EAAH,EAAGA,UAAH,OAChB,qBAAKA,UAAS,oBAAeA,IADb,C","file":"static/js/user-login.3e9a0f2f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\n\nimport { Formik, Form, Field } from 'formik';\nimport { NotificationManager } from 'components/common/react-notifications';\n\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport IntlMessages from 'helpers/IntlMessages';\nimport AdminLogin from 'utils/API/api';\nimport authStorage from 'utils/API/authStroge';\nimport { useHistory } from 'react-router-dom';\n\nconst validatePassword = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your password';\n  } else if (value.length < 4) {\n    error = 'Value must be longer than 3 characters';\n  }\n  return error;\n};\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst Login = () => {\n  const [email] = useState('');\n  const [password] = useState('');\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  const onUserLogin = (value) => {\n    (async () => {\n      const payload = {\n        email: value.email,\n        password: value.password,\n      };\n      setLoading(true);\n      const res = await AdminLogin(payload);\n      if (res !== -1) {\n        NotificationManager.success(\n          'Welcome To Dashboard',\n          'Login success',\n          3000,\n          null,\n          null,\n          ''\n        );\n        authStorage.setAuthDetails(res?.data?.token);\n        history.push('/app/directory/userlist');\n        window.location.reload();\n      }\n      setLoading(false);\n    })();\n  };\n\n  const initialValues = { email, password };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <div className=\"logo-single-page\" />\n          </div>\n          <div className=\"form-side\">\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.login-title\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onUserLogin}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.email\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"email\"\n                      validate={validateEmail}\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"invalid-menu d-block\">{errors.email}</div>\n                    )}\n                  </FormGroup>\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.password\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      type=\"password\"\n                      name=\"password\"\n                      validate={validatePassword}\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"invalid-menu d-block\">\n                        {errors.password}\n                      </div>\n                    )}\n                  </FormGroup>\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.login-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst InjectMassage = (props) => <FormattedMessage {...props} />;\n\nexport default injectIntl(InjectMassage, {\n  withRef: false,\n});\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\nconst Colxx = (props) => (\n  <Col {...props} widths={['xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl']} />\n);\nconst Separator = ({ className }) => (\n  <div className={`separator ${className}`} />\n);\nexport { Colxx, Separator };\n"],"sourceRoot":""}