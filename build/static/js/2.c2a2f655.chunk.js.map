{"version":3,"sources":["utils/BasicModal.js","components/selectionModel.js","views/app/advisor/advisor-table.js","views/app/advisor/advisorInfo.js"],"names":["ModalUi","modalOpen","modelData","toggleModal","basicModal","onSubmit","isOpen","toggle","id","type","CONSTANTS","RIGHT_SIDEBAR_FIELD","map","data","className","Label","name","placeholder","required","color","onClick","SelectionModel","dataList","selectedData","useState","selectedState","setSelectedSate","Modal","style","display","padding","flexWrap","gap","item","border","filter","selectedItem","key","length","borderRadius","cursor","previous","value","ModalFooter","Button","isEditButtonVisible","AdvisorInfo","kyc","getValue","parsePhoneNumber","toString","formatInternational","ADVISOR_TYPE","injectIntl","Kyc","advisorTransaction","advisorData","callRecords","chatRecords","language","advisorAvailabilities","updateAdvisorProfile","updateAdvisorKycProfile","updateAdvisorVideo","addAvailabilityData","deleteAdvisorVideo","videoLoading","categories","setRefreash","setLoading","activeTab","setActiveTab","setModalOpen","setIsOpen","isCategoryOpen","setIsCategoryOpen","isModelOpen","setIsModelOpen","AvailabilityDeleteData","setAvailabilityDeleteData","getFormKey","copyContent","text","navigator","clipboard","writeText","console","log","error","xxs","sidebarMenu","modalTitle","TABLE_ID","addModal","e","preventDefault","payload","field","target","FormData","append","files","checked","titleId","formData","selected","expertise","CATEGORY","list","Category","getformDetails","outline","marginLeft","marginBottom","position","right","top","zIndex","IntlMessages","Row","xl","Card","CardHeader","Nav","tabs","ADVISOR_INFO","NavItem","classnames","active","tabId","TabContent","TabPane","sm","CardBody","Object","keys","FcmToken","ABOUT_US_DETAILS","languages","replaceAll","headers","TABLE_HEADER","ADMIN_TRANSACTION","filterParams","items","index","no","createdTime","moment","createdAt","local","format","transactionText","amount","status","advisorId","adminTransaction","CALL_RECORDS","record","Advisor","callDuration","getTime","width","justifyContent","Input","height","opacity","accept","onChange","video","controls","src","kind","srcLang","label","background","textAlign","alignItems","specification","practicingCourt","pan","registrationNo","remark","ADVISOR_KYC_DETAILS","license","aadharFile","panFile","href","row","specialization","split","trim","ADVISOR_CHAT_HISTORY","chatData","mobile","User","getChatStatus","duration","userCost","advisorCharge","getTimeInMinute","chatIcon","chatHistory","ADVISOR_AVAILABILITY","sort","a","b","day","Days","updatedAt","action","onPositive","deleteAvailability","onNegative","positiveText","negativeText","warning","ProfilePortfolio","match","location","setAdvisorData","setCallRecords","setChatRecords","setLanguage","setAllCategories","refreash","loading","setVideoLoading","setAdvisorTransaction","AdvisorId","pathname","replace","url","useEffect","getAdvisorAllDetails","res","getSpecializations","approve","approveRejectKyc","window","reload","lg","profile","image","updateAdvisorPic","SingleLightbox","thumb","large","Container","Spinner","animation","SmallLineCharts","onBlockHandler","isBlocked","updateAdvisorAction","isAdvisor","onApprove","onReject","AdvisorAvailibilities","updateAdvisorDetails","updateKYCAdvisorDetails","VideoFile","addAvailability","deleteKYCAdvisorVideo"],"mappings":"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","file":"static/js/2.c2a2f655.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  Label,\n  Input,\n} from 'reactstrap';\nimport IntlMessages from 'helpers/IntlMessages';\nimport CONSTANTS from './CONSTANTS';\n\nconst ModalUi = ({\n  modalOpen,\n  modelData,\n  toggleModal,\n  basicModal = 'KYC_MODAL',\n  onSubmit = () => {},\n}) => {\n  return (\n    <Modal isOpen={modalOpen} toggle={toggleModal}>\n      <ModalHeader>\n        <IntlMessages\n          id={\n            modelData.type === 'approve'\n              ? 'modal.modal-approve'\n              : 'modal.modal-reject'\n          }\n        />\n      </ModalHeader>\n      <Form onSubmit={onSubmit}>\n        <ModalBody>\n          {CONSTANTS.RIGHT_SIDEBAR_FIELD[basicModal].map((data) => (\n            <div key={data.id} className=\"mt-2\">\n              <Label>\n                <IntlMessages id={data.Label} />\n              </Label>\n              <Input\n                id={data.id}\n                name={data.name}\n                type={data.type}\n                placeholder={data.placeholder}\n                required\n              />\n            </div>\n          ))}\n        </ModalBody>\n\n        <ModalFooter>\n          <Button color=\"primary\">\n            {modelData.type === 'approve' ? 'Approve' : 'Reject'}\n          </Button>\n          <Button color=\"secondary\" onClick={toggleModal}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ModalUi;\n","import React, { useState } from 'react';\nimport { Button, Modal, ModalFooter } from 'reactstrap';\n\nexport default function SelectionModel({\n  isOpen,\n  toggleModal,\n  onSubmit,\n  dataList = [],\n  selectedData = [],\n}) {\n  const [selectedState, setSelectedSate] = useState(selectedData);\n  return (\n    <Modal isOpen={isOpen} toggle={toggleModal}>\n      <div\n        style={{\n          display: 'flex',\n          padding: '20px',\n          flexWrap: 'wrap',\n          gap: '10px',\n        }}\n      >\n        {dataList.map((item) => (\n          // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n          <p\n            key={item.key}\n            style={{\n              border: `1px solid ${\n                selectedState.filter(\n                  (selectedItem) => item.key === selectedItem.key\n                ).length > 0\n                  ? '#c0a145'\n                  : '#000'\n              }`,\n              padding: '3px 10px',\n              borderRadius: '33px',\n              cursor: 'pointer',\n              color:\n                selectedState.filter(\n                  (selectedItem) => item.key === selectedItem.key\n                ).length > 0\n                  ? '#c0a145'\n                  : '#000',\n            }}\n            onClick={() => {\n              setSelectedSate((previous) => {\n                if (\n                  previous.filter(\n                    (selectedItem) => item.key === selectedItem.key\n                  ).length > 0\n                ) {\n                  return previous.filter(\n                    (selectedItem) => item.key !== selectedItem.key\n                  );\n                }\n                return [...previous, item];\n              });\n            }}\n          >\n            {item.value}\n          </p>\n        ))}\n      </div>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={() => onSubmit(selectedState)}>\n          Save\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  Row,\n  Card,\n  CardBody,\n  Nav,\n  NavItem,\n  TabContent,\n  TabPane,\n  CardHeader,\n  Button,\n  Input,\n} from 'reactstrap';\nimport ViewTable from 'utils/ReactTableCards';\nimport CONSTANTS, {\n  CATEGORY,\n  Days,\n  getTime,\n  getTimeInMinute,\n} from 'utils/CONSTANTS';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport classnames from 'classnames';\nimport IntlMessages from 'helpers/IntlMessages';\nimport { injectIntl } from 'react-intl';\nimport moment from 'moment';\nimport { parsePhoneNumber } from 'libphonenumber-js';\nimport { getChatStatus } from 'utils/function';\nimport AddNewModalWithOutButton from 'components/advisor/add-new-Modal-with-out-button';\nimport './main.css';\nimport SelectionModel from 'components/selectionModel';\nimport AlertPopup from 'components/alert-popup';\nimport { deleteAvailability } from 'utils/API/api';\n\nconst isEditButtonVisible = {\n  AdvisorInfo: true,\n  kyc: true,\n};\n\nconst getValue = (id, data) => {\n  switch (id) {\n    case 'mobile':\n      return parsePhoneNumber(`+${data[id].toString()}`).formatInternational();\n\n    case 'type':\n      return CONSTANTS.ADVISOR_TYPE[data[id]];\n\n    default:\n      return data[id];\n  }\n};\n\nconst AdvisorTableBody = ({\n  Kyc,\n  advisorTransaction,\n  advisorData,\n  callRecords,\n  chatRecords = [],\n  language,\n  advisorAvailabilities = [],\n  updateAdvisorProfile = () => {},\n  updateAdvisorKycProfile = () => {},\n  updateAdvisorVideo = () => {},\n  addAvailabilityData = () => {},\n  deleteAdvisorVideo = () => {},\n  videoLoading = false,\n  categories,\n  setRefreash,\n  setLoading,\n}) => {\n  const [activeTab, setActiveTab] = useState('AdvisorInfo');\n  const [modalOpen, setModalOpen] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isCategoryOpen, setIsCategoryOpen] = useState(false);\n  const [isModelOpen, setIsModelOpen] = useState(false);\n  const [AvailabilityDeleteData, setAvailabilityDeleteData] = useState({});\n  const getformDetails = () => {\n    switch (activeTab) {\n      case 'AdvisorInfo':\n        return {\n          ...advisorData,\n          selected: {\n            expertise: advisorData?.expertise,\n          },\n          expertise: CATEGORY.list.map((Category) => {\n            return {\n              id: Category?.id,\n              name: Category?.expertise,\n              value: Category?.expertise,\n            };\n          }),\n        };\n      case 'kyc':\n        return Kyc;\n      default:\n        return {\n          ...advisorData,\n          expertise: CATEGORY.list.map((Category) => {\n            return {\n              id: Category?.id,\n              name: Category?.expertise,\n              value: Category?.expertise,\n            };\n          }),\n        };\n    }\n  };\n\n  const getFormKey = () => {\n    switch (activeTab) {\n      case 'AdvisorInfo':\n        return 'ADVISOR_MODAL';\n      case 'kyc':\n        return 'ADVISOR_KVC_MODAL';\n      case 'availability':\n        return 'AVAILABILITY_MODAL';\n      default:\n        return 'ADVISOR_MODAL';\n    }\n  };\n\n  const callFormSubmitFuction = (e) => {\n    e.preventDefault();\n    let payload = {};\n\n    switch (activeTab) {\n      case 'AdvisorInfo':\n        CONSTANTS.RIGHT_SIDEBAR_FIELD[getFormKey()].map((field) => {\n          payload[field.name] =\n            field.type === 'number'\n              ? +e.target[field.name].value\n              : e.target[field.name].value;\n          return 0;\n        });\n        setModalOpen((previous) => !previous);\n\n        return updateAdvisorProfile(payload);\n      case 'kyc':\n        payload = new FormData();\n        CONSTANTS.RIGHT_SIDEBAR_FIELD[getFormKey()]\n          .filter((field) => field.type !== 'file')\n          .map((field) => {\n            // console.log('field', field.name, e.target[field.name].value);\n            payload.append(\n              field.name,\n              field.type === 'number'\n                ? +e.target[field.name].value\n                : e.target[field.name].value\n            );\n\n            return 0;\n          });\n        CONSTANTS.RIGHT_SIDEBAR_FIELD[getFormKey()]\n          .filter((field) => field.type === 'file')\n          .map((field) => {\n            if (e.target[field.name].files[0]) {\n              console.log('fieldFile', field.name);\n              payload.append(field.name, e.target[field.name].files[0]);\n            }\n            return 0;\n          });\n        setModalOpen((previous) => !previous);\n        return updateAdvisorKycProfile(payload);\n      case 'availability':\n        CONSTANTS.RIGHT_SIDEBAR_FIELD[getFormKey()]\n          .filter((field) => field.type !== 'checkbox')\n          .map((field) => {\n            payload[field.name] =\n              field.type === 'number'\n                ? +e.target[field.name].value\n                : e.target[field.name].value;\n            return 0;\n          });\n        CONSTANTS.RIGHT_SIDEBAR_FIELD[getFormKey()]\n          .filter((field) => field.type === 'checkbox')\n          .map((field) => {\n            payload[field.name] = e.target[field.name].checked;\n            return 0;\n          });\n        setModalOpen((previous) => !previous);\n        return addAvailabilityData(payload);\n      default:\n        return updateAdvisorProfile(payload);\n    }\n  };\n  const deleteAvailabilityHandler = () => {\n    setLoading();\n    setIsModelOpen(false);\n    (async () => {\n      const res = await deleteAvailability(AvailabilityDeleteData.id);\n      if (res !== -1) {\n        setRefreash();\n      } else {\n        setLoading();\n      }\n    })();\n  };\n  const deletePopup = (Availability) => {\n    setAvailabilityDeleteData(Availability);\n    setIsModelOpen(true);\n  };\n\n  const copyContent = async (text) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      console.log('Content copied to clipboard');\n    } catch (err) {\n      console.error('Failed to copy: ', err);\n    }\n  };\n\n  return (\n    <Colxx xxs=\"12\">\n      <AddNewModalWithOutButton\n        modalOpen={modalOpen}\n        toggleModal={() => setModalOpen((previous) => !previous)}\n        sidebarMenu={getFormKey()}\n        modalTitle={CONSTANTS.TABLE_ID.addModal}\n        onSubmit={callFormSubmitFuction}\n        titleId=\"Edit Advisor Details\"\n        formData={getformDetails()}\n      />\n      {isEditButtonVisible[activeTab] && (\n        <Button\n          outline\n          color=\"primary\"\n          style={{\n            marginLeft: 'auto',\n            marginBottom: '14px',\n            position: 'absolute',\n            right: '15px',\n            top: '-50px',\n            zIndex: '100',\n          }}\n          className=\"top-right-button\"\n          onClick={() => setModalOpen((previous) => !previous)}\n        >\n          <IntlMessages id=\"survey.add-new-edit\" />\n        </Button>\n      )}\n      <Row>\n        <Colxx xxs=\"12\" xl=\"12\" className=\"col-left\">\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <Nav tabs className=\"card-header-tabs\">\n                {CONSTANTS.ADVISOR_INFO.map((data) => (\n                  <NavItem key={data.id}>\n                    <Card\n                      className={classnames({\n                        active: activeTab === data.tabId,\n                        'nav-link': true,\n                      })}\n                      onClick={() => setActiveTab(data.tabId)}\n                    >\n                      <IntlMessages id={data.Label} />\n                    </Card>\n                  </NavItem>\n                ))}\n              </Nav>\n            </CardHeader>\n\n            <TabContent activeTab={activeTab}>\n              <TabPane tabId=\"AdvisorInfo\">\n                <Row>\n                  <Colxx sm=\"12\">\n                    <CardBody>\n                      {Object.keys(advisorData)\n                        .filter(\n                          (id) =>\n                            id === 'name' ||\n                            id === 'mobile' ||\n                            id === 'expertise' ||\n                            id === 'about' ||\n                            id === 'charges' ||\n                            id === 'upiId' ||\n                            id === 'ratings' ||\n                            id === 'profileViews' ||\n                            id === 'type' ||\n                            id === 'FcmToken'\n                        )\n                        .map((id) => (\n                          // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n                          <p\n                            className=\"mb-3\"\n                            key={id}\n                            onClick={() =>\n                              id === 'FcmToken'\n                                ? copyContent(advisorData?.FcmToken)\n                                : () => {}\n                            }\n                          >\n                            {CONSTANTS.ABOUT_US_DETAILS[id]} :{' '}\n                            <span>{getValue(id, advisorData)}</span>\n                          </p>\n                        ))}\n                      {advisorData?.languages != null && (\n                        <>\n                          <p className=\"mb-3\">\n                            Languages : &nbsp;\n                            {advisorData?.languages\n                              .toString()\n                              .replaceAll(',', ', ')}\n                          </p>\n                          <Button\n                            outline\n                            color=\"primary\"\n                            className=\"top-right-button\"\n                            onClick={() => setIsOpen(true)}\n                          >\n                            Edit Language\n                          </Button>\n                        </>\n                      )}\n                    </CardBody>\n                    <SelectionModel\n                      isOpen={isOpen}\n                      toggleModal={() => {\n                        setIsOpen(false);\n                      }}\n                      onSubmit={(selectedState) => {\n                        console.log(selectedState);\n                        updateAdvisorProfile({\n                          languages: selectedState\n                            .map((selectedItem) => selectedItem.value)\n                            .toString(),\n                        });\n                        setIsOpen(false);\n                      }}\n                      dataList={language.map((item) => {\n                        return { key: item?.language, value: item?.language };\n                      })}\n                      selectedData={advisorData?.languages.map((item) => {\n                        return { key: item, value: item };\n                      })}\n                    />\n                  </Colxx>\n                </Row>\n              </TabPane>\n              <TabPane tabId=\"transactions\">\n                <Row>\n                  <Colxx sm=\"12\">\n                    <CardBody>\n                      <ViewTable\n                        headers={CONSTANTS.TABLE_HEADER.ADMIN_TRANSACTION}\n                        filterParams=\"id\"\n                        items={advisorTransaction.map((item, index) => {\n                          return {\n                            ...item,\n                            no: index + 1,\n                            createdTime: moment(item.createdAt)\n                              .local()\n                              .format('h:mm:ss a'),\n                            createdAt: moment(item.createdAt)\n                              .local()\n                              .format('dddd, MMMM Do YYYY'),\n                            transactionText: [item?.amount, item?.status],\n                          };\n                        })}\n                        advisorId={CONSTANTS.TABLE_ID.adminTransaction}\n                      />\n                    </CardBody>\n                  </Colxx>\n                </Row>\n              </TabPane>\n              <TabPane tabId=\"callhistory\">\n                <Row>\n                  <Colxx sm=\"12\">\n                    <CardBody>\n                      <ViewTable\n                        headers={CONSTANTS.TABLE_HEADER.CALL_RECORDS}\n                        items={callRecords.map((record, index) => {\n                          return {\n                            ...record,\n                            ...record.Advisor,\n                            no: index + 1,\n                            callDuration: getTime(record.callDuration),\n                            createdAt: moment(record?.createdAt)\n                              .local()\n                              .format('Do MMMM, YYYY h:mm:ss a'),\n                          };\n                        })}\n                        advisorId={CONSTANTS.TABLE_ID.callRecords}\n                      />\n                    </CardBody>\n                  </Colxx>\n                </Row>\n              </TabPane>\n              <TabPane tabId=\"kyc\">\n                <Row>\n                  <Colxx sm=\"12\">\n                    <CardBody>\n                      <div style={{ display: 'flex' }}>\n                        <p className=\"mb-3\">Video Introduction </p>\n\n                        <div\n                          style={{\n                            marginBottom: '20px',\n                            display: 'flex',\n                            gap: '10px',\n                            width: '205px',\n                            justifyContent: 'end',\n                          }}\n                        >\n                          {/* {Kyc.video && (\n                            <Button\n                              outline\n                              color=\"primary\"\n                              className=\"top-right-button\"\n                              onClick={() => getImages(Kyc.video)}\n                            >\n                              <i className=\"simple-icon-arrow-down\" />\n                            </Button>\n                          )} */}\n                          <div>\n                            <Input\n                              style={{\n                                width: '65px',\n                                height: '37px',\n                                cursor: 'pointer !important',\n                                position: 'absolute',\n                                opacity: '0',\n                              }}\n                              type=\"file\"\n                              accept=\"video/mp4,video/x-m4v,video/*\"\n                              onChange={(e) =>\n                                updateAdvisorVideo(e.target.files[0])\n                              }\n                            />\n                            <Button\n                              outline\n                              color=\"primary\"\n                              className=\"top-right-button\"\n                            >\n                              Edit\n                            </Button>\n                          </div>\n                          {Kyc.video ? (\n                            <Button\n                              outline\n                              color=\"primary\"\n                              className=\"top-right-button\"\n                              onClick={() => {\n                                deleteAdvisorVideo();\n                              }}\n                            >\n                              Delete\n                            </Button>\n                          ) : null}\n                        </div>\n                      </div>\n\n                      {videoLoading && <p>Loading ...</p>}\n\n                      {Kyc.video ? (\n                        <video width=\"320\" height=\"240\" controls>\n                          <source src={Kyc.video} type=\"video/mp4\" />\n                          <track\n                            src=\"captions_en.vtt\"\n                            kind=\"captions\"\n                            srcLang=\"en\"\n                            label=\"english_captions\"\n                          />\n                          Your browser does not support the video tag.\n                        </video>\n                      ) : (\n                        <p\n                          style={{\n                            background: '#d4d4d485',\n                            width: '320px',\n                            textAlign: 'center',\n                            height: '139px',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            borderRadius: '10px',\n                            color: '#8c8c8c',\n                          }}\n                        >\n                          No Video Found\n                        </p>\n                      )}\n\n                      <p className=\"mb-3\">\n                        Category : <span>{Kyc?.specification}</span>\n                      </p>\n\n                      <Button\n                        outline\n                        color=\"primary\"\n                        className=\"top-right-button mb-3\"\n                        onClick={() => setIsCategoryOpen(true)}\n                      >\n                        Edit\n                      </Button>\n\n                      {Object.keys(Kyc)\n                        .filter(\n                          (id) =>\n                            id === 'practicingLocation' ||\n                            (Kyc?.practicingCourt !== null &&\n                              id === 'practicingCourt') ||\n                            id === 'practicingStartDate' ||\n                            id === 'aadhar' ||\n                            (Kyc?.pan !== null && id === 'pan') ||\n                            (Kyc?.registrationNo !== null &&\n                              id === 'registrationNo') ||\n                            (Kyc?.remark !== null && id === 'remark') ||\n                            id === 'AdvisorId'\n                        )\n                        .map((id) => (\n                          <p className=\"mb-3\" key={id}>\n                            {CONSTANTS.ADVISOR_KYC_DETAILS[id]} :{' '}\n                            <span>{Kyc[id]}</span>\n                          </p>\n                        ))}\n\n                      {Object.keys(Kyc)\n                        .filter(\n                          (id) =>\n                            (Kyc?.license !== null && id === 'license') ||\n                            (Kyc?.aadharFile !== null && id === 'aadharFile') ||\n                            (Kyc?.panFile !== null && id === 'panFile')\n                        )\n                        .map((id) => (\n                          <a href={Kyc[id]} key={id}>\n                            <Button outline color=\"primary\" key={id}>\n                              {`Download ${id}`}\n                            </Button>\n                          </a>\n                        ))}\n                    </CardBody>\n                  </Colxx>\n                </Row>\n\n                <SelectionModel\n                  isOpen={isCategoryOpen}\n                  toggleModal={() => {\n                    setIsCategoryOpen(false);\n                  }}\n                  onSubmit={(selectedState) => {\n                    console.log(selectedState);\n                    const value = selectedState\n                      .map((row) => row.value)\n                      .toString();\n                    const formData = new FormData();\n                    formData.append('specification', value);\n                    updateAdvisorKycProfile(formData);\n                    setIsCategoryOpen(false);\n                  }}\n                  dataList={categories.map((item) => {\n                    return {\n                      key: item?.specialization,\n                      value: item?.specialization,\n                    };\n                  })}\n                  selectedData={\n                    Kyc.specification\n                      ? Kyc.specification.split(',').map((item) => {\n                          return { key: item.trim(), value: item.trim() };\n                        })\n                      : []\n                  }\n                />\n              </TabPane>\n              <TabPane tabId=\"chatHistory\">\n                <Row>\n                  <Colxx sm=\"12\">\n                    <CardBody>\n                      <ViewTable\n                        headers={CONSTANTS.TABLE_HEADER.ADVISOR_CHAT_HISTORY}\n                        items={chatRecords.map((chatData, index) => {\n                          return {\n                            ...chatData,\n                            no: index + 1,\n                            ...chatData?.Advisor,\n                            mobile: chatData?.User?.mobile\n                              ? parsePhoneNumber(\n                                  `+${chatData?.User?.mobile}`\n                                ).formatInternational()\n                              : 'No Number Found',\n                            status: getChatStatus(chatData),\n                            duration: getTime(chatData?.duration * 60),\n                            userCost: [\n                              chatData?.userCost ? chatData?.userCost : `0`,\n                              `a${getChatStatus(chatData)}`,\n                            ],\n                            advisorCharge: chatData?.advisorCharge\n                              ? `₹${\n                                  chatData?.advisorCharge *\n                                  getTimeInMinute(chatData?.duration * 60)\n                                }`\n                              : `₹0`,\n                            chatIcon: [\n                              `simple-icon-eyeglass`,\n                              `/app/chatinfo/${chatData.id}`,\n                            ],\n                            createdAt: moment(chatData?.createdAt)\n                              .local()\n                              .format('Do MMMM, YYYY'),\n                            createdTime: moment(chatData?.createdAt)\n                              .local()\n                              .format('h:mm:ss a'),\n                          };\n                        })}\n                        advisorId={CONSTANTS.TABLE_ID.chatHistory}\n                        filterParams=\"name\"\n                      />\n                    </CardBody>\n                  </Colxx>\n                </Row>\n              </TabPane>\n              <TabPane tabId=\"availability\">\n                <Row>\n                  <Colxx sm=\"12\">\n                    <Row className=\"justify-content-end\">\n                      <Button\n                        outline\n                        color=\"primary\"\n                        style={{\n                          // alignItems: 'end',\n                          // margin: '0 0 20px 20px',\n                          marginLeft: 'auto',\n                          marginBottom: '14px',\n                          position: 'absolute',\n                          right: '15px',\n                          top: '-100px',\n                          zIndex: '100',\n                        }}\n                        className=\"top-right-button\"\n                        onClick={() => setModalOpen((previous) => !previous)}\n                      >\n                        <IntlMessages id=\"survey.add-new\" />\n                      </Button>\n                    </Row>\n                    <CardBody>\n                      <ViewTable\n                        headers={CONSTANTS.TABLE_HEADER.ADVISOR_AVAILABILITY}\n                        filterParams=\"id\"\n                        items={advisorAvailabilities\n                          .sort((a, b) => a?.day - b?.day)\n                          .map((item, index) => {\n                            return {\n                              ...item,\n                              no: index + 1,\n                              day: Days[item?.day].label,\n\n                              createdTime: moment(item.createdAt)\n                                .local()\n                                .format('h:mm:ss a'),\n                              createdAt: moment(item.createdAt)\n                                .local()\n                                .format('dddd, MMMM Do YYYY'),\n                              updatedAt: moment(item.updatedAt)\n                                .local()\n                                .format('dddd, MMMM Do YYYY'),\n                              action: [() => deletePopup(item), false],\n                            };\n                          })}\n                        advisorId={CONSTANTS.TABLE_ID.adminTransaction}\n                      />\n                    </CardBody>\n                  </Colxx>\n                </Row>\n              </TabPane>\n            </TabContent>\n          </Card>\n        </Colxx>\n      </Row>\n      <AlertPopup\n        isOpen={isModelOpen}\n        toggleModal={() => setIsModelOpen((previous) => !previous)}\n        onPositive={deleteAvailabilityHandler}\n        onNegative={() => setIsModelOpen((previous) => !previous)}\n        positiveText=\"Agree\"\n        negativeText=\"cancel\"\n        warning=\"Aar you sure want to delete the Availability ?\"\n      />\n    </Colxx>\n  );\n};\n\nexport default injectIntl(AdvisorTableBody);\n","import React, { useEffect, useState } from 'react';\nimport { Row, Card, Container, Spinner, Button, Input } from 'reactstrap';\nimport moment from 'moment';\nimport { Colxx } from 'components/common/CustomBootstrap';\nimport SingleLightbox from 'components/advisor/SingleLightbox';\nimport SmallLineCharts from 'containers/directory/SmallLineCharts';\nimport {\n  addAvailability,\n  approveRejectKyc,\n  deleteKYCAdvisorVideo,\n  getAdvisorAllDetails,\n  getSpecializations,\n  updateAdvisorAction,\n  updateAdvisorDetails,\n  updateAdvisorPic,\n  updateKYCAdvisorDetails,\n} from 'utils/API/api';\nimport ModalUi from 'utils/BasicModal';\nimport AdvisorTableBody from './advisor-table';\n\nconst ProfilePortfolio = ({ match, location }) => {\n  const [advisorData, setAdvisorData] = useState({});\n  const [callRecords, setCallRecords] = useState([]);\n  const [chatRecords, setChatRecords] = useState([]);\n  const [language, setLanguage] = useState([]);\n  const [categories, setAllCategories] = useState([]);\n\n  const [refreash, setRefreash] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n  const [videoLoading, setVideoLoading] = useState(false);\n\n  const [advisorTransaction, setAdvisorTransaction] = useState([]);\n  const AdvisorId = location.pathname.replace(`${match.url}/`, '');\n\n  const [modalOpen, setModalOpen] = useState({\n    isOpen: false,\n    type: '',\n    data: {},\n  });\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const res = await getAdvisorAllDetails(AdvisorId);\n      if (res !== -1) {\n        setAdvisorData(res[0]?.data?.data?.data);\n        setAdvisorTransaction(res[1]?.data?.data?.data);\n        setChatRecords(res[3]?.data?.data?.data);\n        setLanguage(res[4]?.data?.data?.data);\n        setCallRecords(\n          res[2]?.data?.data?.data.map((record) => {\n            return {\n              ...record,\n              createdAt: moment(record?.createdAt)\n                .local()\n                .format('MMMM Do YYYY'),\n            };\n          })\n        );\n        setChatRecords(res[3]?.data?.data?.data);\n      }\n      setLoading(false);\n    })();\n  }, [refreash]);\n\n  useEffect(() => {\n    (async () => {\n      if (advisorData?.expertise) {\n        const res = await getSpecializations(advisorData?.expertise);\n        console.log(res);\n        if (res !== -1) {\n          setAllCategories(res?.data?.data?.data);\n        }\n      }\n    })();\n  }, [advisorData]);\n\n  const onApprove = (kyc) => {\n    setModalOpen({ isOpen: true, type: 'approve', data: { kyc } });\n  };\n\n  const onReject = (kyc) => {\n    setModalOpen({ isOpen: true, type: 'reject', data: { kyc } });\n  };\n\n  const onBlockHandler = (isBlocked) => {\n    (async () => {\n      const res = await updateAdvisorAction(AdvisorId);\n      setLoading(true);\n      if (res !== -1) {\n        setAdvisorData((previous) => {\n          return { ...previous, isBlocked: !isBlocked };\n        });\n      } else {\n        setAdvisorData((previous) => {\n          return { ...previous, isBlocked };\n        });\n      }\n      setLoading(false);\n    })();\n  };\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n    (async () => {\n      const payload = {\n        remark: e.target.remark.value,\n      };\n\n      if (modalOpen.type === 'approve') {\n        payload.approve = true;\n        setModalOpen(false);\n        setLoading(true);\n\n        await approveRejectKyc(modalOpen.data.kyc.Kyc.id, payload);\n        setLoading(false);\n        window.location.reload();\n      } else {\n        payload.approve = false;\n        setModalOpen(false);\n        setLoading(true);\n        await approveRejectKyc(modalOpen.data.kyc.Kyc.id, payload);\n        setLoading(false);\n        window.location.reload();\n      }\n    })();\n  };\n\n  const updateAdvisorProfile = (data) => {\n    (async () => {\n      setLoading(true);\n      const payload = data;\n      if (!payload.languages) payload.languages = advisorData?.languages;\n      console.log(payload);\n      const res = await updateAdvisorDetails(payload, AdvisorId);\n      if (res !== -1) {\n        setRefreash((previous) => !previous);\n      }\n      setLoading(false);\n    })();\n  };\n\n  const updateAdvisorKycProfile = (payload) => {\n    (async () => {\n      setLoading(true);\n      const res = await updateKYCAdvisorDetails(payload, AdvisorId);\n      if (res !== -1) {\n        setRefreash((previous) => !previous);\n      }\n      setLoading(false);\n    })();\n  };\n\n  const addAvailabilityData = (data) => {\n    (async () => {\n      setLoading(true);\n      const payload = data;\n      payload.AdvisorId = AdvisorId;\n      const res = await addAvailability(payload);\n      if (res !== -1) {\n        setRefreash((previous) => !previous);\n      }\n      setLoading(false);\n    })();\n  };\n\n  const updateAdvisorVideo = (VideoFile) => {\n    (async () => {\n      setVideoLoading(true);\n      const payload = new FormData();\n      payload.append('video', VideoFile);\n      const res = await updateKYCAdvisorDetails(payload, AdvisorId);\n      if (res !== -1) {\n        setRefreash((previous) => !previous);\n      }\n      setVideoLoading(false);\n    })();\n  };\n\n  const deleteAdvisorVideo = () => {\n    (async () => {\n      setVideoLoading(true);\n      const res = await deleteKYCAdvisorVideo(AdvisorId);\n      if (res !== -1) {\n        setRefreash((previous) => !previous);\n      }\n      setVideoLoading(false);\n    })();\n  };\n\n  const updateAdvisorProfilePic = (image) => {\n    (async () => {\n      setLoading(true);\n      const payload = new FormData();\n      payload.append('profile', image);\n      payload.append('languages', advisorData?.languages);\n      const res = await updateAdvisorPic(payload, AdvisorId);\n      if (res !== -1) {\n        setRefreash((previous) => !previous);\n      }\n      setLoading(false);\n    })();\n  };\n\n  return (\n    <>\n      <ModalUi\n        modalOpen={modalOpen.isOpen}\n        modelData={modalOpen}\n        toggleModal={() =>\n          setModalOpen((previous) => {\n            return { ...previous, isOpen: !previous.isOpen };\n          })\n        }\n        basicModal=\"KYC_MODAL\"\n        onSubmit={onSubmitHandler}\n      />\n      <Colxx xl=\"12\" className=\"mb-4\">\n        <Row lg=\"12\" xl=\"12\">\n          <Colxx lg=\"4\" xl=\"4\">\n            {advisorData.profile ? (\n              <Card className=\"mb-2\">\n                <div\n                  style={{\n                    position: 'absolute',\n                    right: '10px',\n                    top: '10px',\n                    background: '#000000b5',\n                    borderRadius: '20px',\n                    zIndex: '10',\n                  }}\n                >\n                  <Input\n                    style={{\n                      width: '65px',\n                      height: '37px',\n                      cursor: 'pointer !important',\n                      position: 'absolute',\n                      opacity: '0',\n                    }}\n                    type=\"file\"\n                    accept=\"image/jpg,image/jpeg,image/png,image/*\"\n                    onChange={(e) => updateAdvisorProfilePic(e.target.files[0])}\n                  />\n                  <Button outline color=\"primary\" className=\"top-right-button\">\n                    Edit\n                  </Button>\n                </div>\n                <SingleLightbox\n                  thumb={\n                    advisorData.profile\n                      ? advisorData.profile\n                      : '/assets/img/profiles/1.jpg'\n                  }\n                  large={\n                    advisorData.profile\n                      ? advisorData.profile\n                      : '/assets/img/profiles/1.jpg'\n                  }\n                  className=\"card-img-top\"\n                />\n              </Card>\n            ) : (\n              <Container className=\"d-flex justify-content-center align-items-center\">\n                <Spinner\n                  animation=\"border\"\n                  className=\"d-inline-flex m-2 \"\n                  color=\"$theme-color-yellow-granola\"\n                />\n              </Container>\n            )}\n          </Colxx>\n          <Colxx lg=\"6\" xl=\"8\" className=\"mb-4\">\n            <SmallLineCharts\n              onBlockHandler={onBlockHandler}\n              isAdvisor\n              advisorData={advisorData}\n              loading={loading}\n              onApprove={onApprove}\n              onReject={onReject}\n              callRecords={callRecords}\n            />\n          </Colxx>\n        </Row>\n      </Colxx>\n      <Row>\n        {advisorData?.Kyc && advisorTransaction && (\n          <AdvisorTableBody\n            Kyc={advisorData.Kyc}\n            advisorTransaction={advisorTransaction}\n            advisorData={advisorData}\n            advisorAvailabilities={advisorData?.AdvisorAvailibilities}\n            callRecords={callRecords}\n            chatRecords={chatRecords}\n            updateAdvisorProfile={updateAdvisorProfile}\n            updateAdvisorKycProfile={updateAdvisorKycProfile}\n            updateAdvisorVideo={updateAdvisorVideo}\n            addAvailabilityData={addAvailabilityData}\n            deleteAdvisorVideo={deleteAdvisorVideo}\n            videoLoading={videoLoading}\n            language={language}\n            categories={categories}\n            setRefreash={() => setRefreash(!refreash)}\n            setLoading={() => setLoading(!loading)}\n          />\n        )}\n      </Row>\n    </>\n  );\n};\nexport default ProfilePortfolio;\n"],"sourceRoot":""}