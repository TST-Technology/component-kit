{"version":3,"sources":["views/app/request/index.js"],"names":["Report","match","useState","reportData","setReportData","loading","setLoading","useEffect","getReport","res","data","map","report","index","no","advisor_name","Advisor","name","user_number","User","mobile","advisor_number","advisor_category","expertise","createdAt","moment","local","format","time","fallback","className","exact","from","url","to","path","render","animation","color","headers","CONSTANTS","TABLE_HEADER","FEEDBACKS","items","advisorId","TABLE_ID","complain","filterParams"],"mappings":"2OAoEeA,UA5DA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA0BA,OAxBAC,qBAAU,WACR,gCAAC,yGACCD,GAAW,GADZ,SAEmBE,cAFnB,QAGc,KADPC,EAFP,SAIGL,EAAa,OACXK,QADW,IACXA,GADW,UACXA,EAAKC,YADM,iBACX,EAAWA,YADA,aACX,EAAiBA,KAAKC,KAAI,SAACC,EAAQC,GACjC,OAAO,2BACFD,GADL,IAEEE,GAAID,EAAQ,EACZE,aAAcH,EAAOI,QAAQC,KAC7BC,YAAaN,EAAOO,KAAKC,OACzBC,eAAgBT,EAAOI,QAAQI,OAC/BE,iBAAkBV,EAAOI,QAAQO,UACjCC,UAAWC,IAAOb,EAAOY,WAAWE,QAAQC,OAAO,iBACnDC,KAAMH,IAAOb,EAAOY,WAAWE,QAAQC,OAAO,cAEjD,KAGLrB,GAAW,GAnBZ,0CAAD,EAqBD,GAAE,IAGD,cAAC,WAAD,CAAUuB,SAAU,qBAAKC,UAAU,YAAnC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAUC,OAAK,EAACC,KAAI,UAAK/B,EAAMgC,IAAX,KAAmBC,GAAE,UAAKjC,EAAMgC,IAAX,eACzC,cAAC,IAAD,CACEE,KAAI,UAAKlC,EAAMgC,IAAX,aACJG,OAAQ,kBACL/B,EAQC,mCACE,cAAC,IAAD,CAAWyB,UAAU,mDAArB,SACE,cAAC,IAAD,CACEO,UAAU,SACVP,UAAU,qBACVQ,MAAM,oCAZZ,cAAC,IAAD,CACEC,QAASC,IAAUC,aAAaC,UAChCC,MAAOxC,EACPyC,UAAWJ,IAAUK,SAASC,SAC9BC,aAAa,gBANX,IAqBV,cAAC,IAAD,CAAUb,GAAG,eAIpB,C","file":"static/js/menu.2d36eb22.chunk.js","sourcesContent":["import ViewTable from 'utils/ReactTableCards';\nimport React, { Suspense, useState, useEffect } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport CONSTANTS from 'utils/CONSTANTS';\nimport { getReport } from 'utils/API/api';\nimport moment from 'moment';\nimport { Container, Spinner } from 'reactstrap';\n\nconst Report = ({ match }) => {\n  const [reportData, setReportData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const res = await getReport();\n      if (res !== -1) {\n        setReportData(\n          res?.data?.data?.data.map((report, index) => {\n            return {\n              ...report,\n              no: index + 1,\n              advisor_name: report.Advisor.name,\n              user_number: report.User.mobile,\n              advisor_number: report.Advisor.mobile,\n              advisor_category: report.Advisor.expertise,\n              createdAt: moment(report.createdAt).local().format('Do MMMM, YYYY'),\n              time: moment(report.createdAt).local().format('h:mm:ss a'),\n            };\n          })\n        );\n      }\n      setLoading(false);\n    })();\n  }, []);\n\n  return (\n    <Suspense fallback={<div className=\"loading\" />}>\n      <Switch>\n        <Redirect exact from={`${match.url}/`} to={`${match.url}/complain`} />\n        <Route\n          path={`${match.url}/complain`}\n          render={() =>\n            !loading ? (\n              <ViewTable\n                headers={CONSTANTS.TABLE_HEADER.FEEDBACKS}\n                items={reportData}\n                advisorId={CONSTANTS.TABLE_ID.complain}\n                filterParams=\"advisor_name\"\n              />\n            ) : (\n              <>\n                <Container className=\"d-flex justify-content-center align-items-center\">\n                  <Spinner\n                    animation=\"border\"\n                    className=\"d-inline-flex m-2 \"\n                    color=\"$theme-color-yellow-granola\"\n                  />\n                </Container>\n              </>\n            )\n          }\n        />\n        <Redirect to=\"/error\" />\n      </Switch>\n    </Suspense>\n  );\n};\nexport default Report;\n"],"sourceRoot":""}